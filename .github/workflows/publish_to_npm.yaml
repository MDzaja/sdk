name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'

jobs:
  release:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/typescript  # Set working directory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate Tag Format
        id: validate_tag
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Tag name: $TAG_NAME"

          # Validate tag format: vX.Y.Z, vX.Y, vX.Y.ZaN, vX.Y.ZbN, vX.Y.ZrcN
          if [[ ! "$TAG_NAME" =~ ^v([0-9]+)\.([0-9]+)(\.[0-9]+)?(a[0-9]+|b[0-9]+|rc[0-9]+)?$ ]]; then
            echo "Invalid tag format: $TAG_NAME"
            echo "Allowed formats: vX.Y, vX.Y.Z, vX.Y.ZaN, vX.Y.ZbN, vX.Y.ZrcN"
            exit 1
          fi

          # Extract version from tag (remove 'v' prefix)
          PACKAGE_VERSION="${TAG_NAME#v}"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org/'

      - name: Update Version in package.json
        run: |
          npm version $PACKAGE_VERSION --no-git-tag-version

      - name: Install dependencies without running postinstall
        run: npm install --ignore-scripts

      - name: Build the package
        run: npm run build

      - name: Audit signatures
        run: npm audit signatures

      - name: Verify npm token
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "NODE_AUTH_TOKEN is not set!"
            exit 1
          else
            echo "NODE_AUTH_TOKEN is set."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check npm token (Partial)
        run: |
          echo "NODE_AUTH_TOKEN (partial hash): ${NODE_AUTH_TOKEN:0:5}*****"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Display Published Package Info
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          echo "Successfully published $PACKAGE_NAME@$PACKAGE_VERSION to npm!"
          echo "Install it using:"
          echo -e "\tnpm install $PACKAGE_NAME@$PACKAGE_VERSION"
