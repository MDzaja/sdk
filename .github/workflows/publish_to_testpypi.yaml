name: Publish to TestPyPI

on:
  pull_request:
    types: [opened, synchronize] # Runs on new PRs and updates
  push:
    branches:
      - main # Runs on PR merge

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Required for Trusted Publisher authentication

    defaults:
      run:
        working-directory: packages/python # Set working directory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade setuptools wheel twine tomli tomli-w build

      - name: Extract Version and Generate New Version
        run: |
          # Get main version from pyproject.toml
          MAIN_VERSION=$(python3 -c "import tomli; from pathlib import Path; \
            content = Path('pyproject.toml').read_text(); \
            print(tomli.loads(content)['project']['version'])")

          # Get short commit SHA
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          # Get numeric SHA
          NUMERIC_SHA=$(printf "%u\n" 0x$SHORT_SHA)

          echo "Short SHA: $SHORT_SHA"
          echo "Numeric SHA: $NUMERIC_SHA"

          # Check if running on a PR or on main
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Get PR number
            PR_NUMBER=${{ github.event.pull_request.number }}
              NEW_VERSION="${MAIN_VERSION}rc${NUMERIC_SHA}.dev${PR_NUMBER}"
          else
            # On main branch after PR merge
            NEW_VERSION="${MAIN_VERSION}rc${NUMERIC_SHA}"
          fi

          echo "Extracted main version: $MAIN_VERSION"
          echo "New version: $NEW_VERSION"

          # Update version in pyproject.toml
          python3 -c "
          import tomli, tomli_w
          from pathlib import Path

          toml_path = Path('pyproject.toml')
          data = tomli.loads(toml_path.read_text())
          data['project']['version'] = '$NEW_VERSION'
          toml_path.write_text(tomli_w.dumps(data))
          "

      - name: Build the package
        run: |
          rm -rf dist/*
          python3 -m build

      - name: Publish to TestPyPI using Trusted Publisher
        run: |
          twine upload --repository testpypi dist/* --verbose
